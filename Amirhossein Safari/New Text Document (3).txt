یک فرم HTML است که به کاربر اجازه می‌دهد نام، شماره همراه و سپس مخاطبان را وارد کند.در این فرم، از تگ <div> برای گروه‌بندی المان‌ها استفاده شده است. ابتدا یک دیو با یک لیبل و یک ورودی متنی برای نام و نام خانوادگی تعریف شده است. نام و نام خانوادگی وارد شده در ورودی متنی با شناسه "name" ذخیره می‌شود. تابع checkFields() همزمان با تایپ در ورودی متنی فعال می‌شود و وضعیت المان‌ها را بررسی می‌کند.سپس، یک دیو دیگر با یک لیبل و یک ورودی تلفن تعریف شده است. ورودی تلفن نیز با شناسه "mobile" دریافت می‌شود و تابع validatePhoneNumber() به صورت خودکار هنگام تغییر مقدار ورودی فعال می‌شود. همچنین، تابع checkFields() برای بررسی وضعیت المان‌ها در هنگام تایپ نیز فعال است. بعد از ورود شماره تلفن، هر گونه خطا یا پیغام اعتبارسنجی در دیوی با شناسه "phoneNumberError" نمایش داده می‌شود.سپس، دو دکمه تعریف شده‌اند. دکمه با شناسه "addContactBtn" که غیرفعال است و تابع addContact() را صدا می‌زند و غرض افزودن مخاطب را دارد. دکمه دیگر با شناسه "toggleFormBtn" است و تابع toggleForm() را فراخوانی می‌کند تا فرم را بسته یا باز کند.در آخر، یک دیو با شناسه "contactsDiv" تعریف شده است که به عنوان محلی برای نمایش مخاطبان وارد شده توسط کاربر استفاده می‌شود.
 

یک تابع به نام "validatePhoneNumber" را تعریف می‌کنیم که برای اعتبارسنجی شماره تلفن همراه استفاده می‌شود. عملکرد این تابع به صورت زیر است:در ابتدا، المان ورودی با شناسه "mobile" (که احتمالاً یک المان ورودی با نوع متن است) را دریافت می‌کند و در متغیری به نام "phoneNumberInput" ذخیره می‌کند.سپس، مقدار وارد شده در المان ورودی را در متغیری به نام "phoneNumber" ذخیره می‌کند.یک الگوی عبارت منظم به نام "pattern" تعریف می‌شود. این الگو برای تطابق با یک شماره تلفن همراه ایرانی معتبر استفاده می‌شود. الگوی تعریف شده به صورت "/^09\d{9}$/" است که به این معنی است که شماره تلفن باید با "09" شروع شود و بعد از آن 9 رقم عددی دیگر داشته باشد.المان دیگری به نام "errorDiv" با شناسه "phoneNumberError" (که احتمالاً یک المان div است) را دریافت می‌کند و در متغیری ذخیره می‌کند.در بخش شرطی، با استفاده از تابع test() الگوی عبارت منظم روی شماره تلفن اعمال می‌شود. اگر شماره تلفن با الگوی تعریف شده همخوانی داشته باشد، پیام خطا در المان "errorDiv" خالی می‌شود.اگر شماره تلفن با الگوی تعریف شده همخوانی نداشته باشد، پیام خطا "شماره تلفن همراه باید 11 رقم و با 09 شروع شود." در المان "errorDiv" قرار داده می‌شود.به طور کلی، این کد به کمک الگوی عبارت منظم، ورودی شماره تلفن همراه را بررسی کرده و پیام خطا مناسب را نمایش می‌دهد اگر شماره تلفن معتبر نباشد.
 

این کد یک رویداد گوش دهنده برای المان با شناسه "mobile" (احتمالاً یک المان ورودی با نوع متن) تعریف می‌کند. عملکرد این رویداد به صورت زیر است:وقتی کاربر چیزی را در المان "mobile" تایپ می‌کند، این رویداد فعال می‌شود.در بلاک تابع، پارامتر x به عنوان ورودی دریافت می‌شود. این پارامتر مربوط به رویداد تایپ است و شامل اطلاعات مختلفی درباره تایپ کاربر است.با استفاده از عبارت "var key = x.keyCode || x.which;"، کد ASCII قابل فهم کاراکتر تایپ شده توسط کاربر را در متغیری به نام "key" ذخیره می‌کند.سپس، با استفاده از شرطی، بررسی می‌شود که آیا کد ASCII کاراکتر تایپ شده عددی است یا خیر. اگر کاراکتر تایپ شده عدد نباشد (کد ASCII کمتر از 48 یا بیشتر از 57 باشد)، به منظور جلوگیری از تایپ آن کاراکتر، تابع preventDefault() روی پارامتر x فراخوانی می‌شود.به طور کلی، این کد جلوگیری می‌کند کاربر در المان "mobile" علاوه بر اعداد، هر کاراکتر دیگری را تایپ کند. فقط اجازه می‌دهد عدد صحیح وارد شود و سایر کاراکترها را جلوی تایپ می‌گیرد.
 

تابع به نام "checkFields" را تعریف می‌کنیم که برای بررسی وضعیت ورودی‌های فرم استفاده می‌شود. عملکرد این تابع به صورت زیر است:ابتدا، سه متغیر به نام‌های "nameField"، "mobileField" و "addButton" تعریف می‌شوند.با استفاده از متد getElementById() المان‌های HTML با شناسه‌های "name"، "mobile" و "addContactBtn" دریافت می‌شوند و به ترتیب در متغیرهای مربوطه ذخیره می‌شوند.مقدار ورودی وارد شده در المان "mobile" را در متغیری به نام "phoneNumber" ذخیره می‌کند.الگوی عبارت منظم به نام "pattern" تعریف می‌شود. این الگو برای تطابق با یک شماره تلفن همراه ایرانی معتبر استفاده می‌شود. الگوی تعریف شده به صورت "/^09\d{9}$/" است که به این معنی است که شماره تلفن باید با "09" شروع شود و بعد از آن 9 رقم عددی دیگر داشته باشد.در بخش شرطی، با استفاده از دستور if، بررسی می‌شود که آیا یکی از ورودی‌های فرم (nameField یا mobileField) خالی است یا شماره تلفن با الگوی تعریف شده همخوانی ندارد. اگر یکی از این شروط برقرار باشد، دکمه addButton غیرفعال (disabled) می‌شود.اگر هر دو شرط اولیه برقرار نباشند، یعنی هر دو ورودی پر شده باشند و شماره تلفن با الگوی منظم همخوانی داشته باشد، دکمه addButton فعال (enabled) می‌شود.به طور کلی، این کد برای بررسی وضعیت ورودی‌های فرم (نام و شماره تلفن) و فعال یا غیرفعال کردن دکمه addButton به مناسبت وضعیت این ورودی‌ها استفاده می‌شود. اگر یکی از ورودی‌ها خالی باشد یا شماره تلفن معتبر نباشد، دکمه غیرفعال می‌شود و در غیر این صورت دکمه فعال می‌شود.
 

این کد دارای یک متغیر به نام "formVisible" است که مقدار اولیه آن برابر با true تعیین شده است. سپس یک تابع به نام "toggleForm" تعریف شده است. عملکرد این تابع به صورت زیر است:در بخش شرطی، با استفاده از دستور if، بررسی می‌شود که آیا متغیر "formVisible" برابر با true است یا خیر.اگر متغیر "formVisible" برابر با true باشد، یعنی فرم قابل مشاهده است، برای المان‌های "name"، "mobile"، "phoneNumberError"، "addContactBtn" و "toggleFormBtn" مقدار display را به "none" (عدم نمایش) تغییر می‌دهد. همچنین، تنظیمات مربوط به تگ‌های label نیز به منظور عدم نمایش آن‌ها اعمال می‌شود.اگر متغیر "formVisible" برابر با false باشد، یعنی فرم مخفی است، برای المان‌های "name"، "mobile"، "phoneNumberError"، "addContactBtn" و "toggleFormBtn" مقدار display را به "block" (نمایش) تغییر می‌دهد. همچنین، تنظیمات مربوط به تگ‌های label نیز به منظور نمایش آن‌ها اعمال می‌شود.در انتها، مقدار متغیر "formVisible" با استفاده از عملگر NOT (!) تغییر کرده و برابر با عکس مقدار قبلی خود قرار می‌گیرد؛ یعنی اگر قبلاً true بوده باشد، حالا false و اگر قبلاً false بوده باشد، حالا true می‌شود.به طور کلی، این کد برای تغییر وضعیت نمایش فرم (نمایش یا مخفی‌سازی المان‌های فرم و تگ‌های label) و تغییر متن دکمه toggleFormBtn بین "نمایش فرم" و "بستن فرم" استفاده می‌شود. با کلیک بر روی دکمه toggleFormBtn، وضعیت نمایش فرم تغییر کرده و المان‌ها و تگ‌ها مطابق با آن تغییر می‌کنند.



این کد شامل دو بخش است. قسمت اول، یک آرایه با نام "contacts" تعریف می‌کند و قسمت دوم، یک تابع به نام "addContact" را تعریف می‌کند. عملکرد این تابع به صورت زیر است:در ابتدا، دو متغیر به نام‌های "nameInput" و "mobileInput" تعریف می‌شوند. این متغیرها به المان‌های HTML با شناسه‌های "name" و "mobile" مربوطه ارجاع می‌دهند.سپس، با استفاده از مقادیر موجود در فیلدهای ورودی (nameInput و mobileInput)، یک شیء مخاطب جدید با مقادیر فیلدها ایجاد می‌شود. این شیء شامل دو خصوصیت name و mobile است که مقدار آن‌ها به ترتیب برابر با value فیلدهای ورودی می‌شود.سپس، شیء مخاطب جدید به آرایه "contacts" اضافه می‌شود با استفاده از تابع push().مقادیر فیلدهای ورودی پس از افزودن مخاطب، پاک (reset) می‌شوند تا آماده دریافت مخاطب جدید باشند.با استفاده از تابع alert() یک پیغام با محتوای "با موفقیت ثبت نام شدید." نمایش داده می‌شود.سپس، تابع displayContacts() فراخوانی می‌شود. این تابع عهده دار نمایش مخاطبان در صفحه است.در نهایت، تابع checkFields() فراخوانی می‌شود تا وضعیت ورودی‌های فرم بررسی شود و فعال یا غیرفعال شدن دکمه addButton موردنظر را تعیین کند.به طور کلی، این کد برای افزودن مخاطبان جدید به آرایه "contacts" و نمایش آن‌ها در صفحه استفاده می‌شود. همچنین، پس از افزودن مخاطب جدید، فیلدهای ورودی پاک می‌شوند و وضعیت ورودی‌های فرم بررسی می‌شود.

 

یک تابع به نام "displayContacts" است که عملکرد زیر را دارد:در ابتدا، المان HTML با شناسه "contactsDiv" را دریافت می‌کند و به متغیر "contactsDiv" ارجاع می‌دهد.سپس، محتوای داخل المان "contactsDiv" را خالی می‌کند تا قبل از نمایش مخاطبان، مخاطبان قبلی را پاک کند. این کار با تنظیم مقدار innerHTML المان برابر با رشته خالی صورت می‌گیرد.سپس، با استفاده از یک حلقه for، تمام مخاطبان موجود در آرایه "contacts" را پیمایش می‌کند. هر بار در هر مرحله از حلقه، یک مخاطب با شاخص i را از آرایه "contacts" دریافت می‌کند و به متغیر "contact" ارجاع می‌دهد.برای هر مخاطب، یک المان HTML جدید با استفاده از تابع createElement() و به نام "contactDiv" ایجاد می‌شود. این المان برای نمایش جزئیات مخاطب استفاده می‌شود.سپس، یک المان پاراگراف (p) جدید با استفاده از تابع createElement() و به نام "nameParagraph" ایجاد می‌شود. مقدار متن این المان تنظیم می‌شود تا نام و نام خانوادگی مخاطب را نمایش دهد با اضافه کردن عبارت "نام و نام خانوادگی: " به مقدار contact.name  سپس، المان "nameParagraph" به داخل "contactDiv" اضافه می‌شود.همچنین، یک المان پاراگراف (p) دیگر با استفاده از تابع createElement() و به نام "mobileParagraph" ایجاد می‌شود. مقدار متن این المان تنظیم می‌شود تا شماره همراه مخاطب را نمایش دهد با اضافه کردن عبارت "شماره همراه: " به مقدار contact.mobile. سپس، المان "mobileParagraph" به داخل "contactDiv" اضافه می‌شود.در نهایت، المان "contactDiv" به داخل "contactsDiv" اضافه می‌شود. این کار با استفاده از تابع appendChild() انجام می‌شود.با اجرای این تابع، تمام مخاطبان موجود در آرایه "contacts" در المان HTML با شناسه "contactsDiv" نمایش داده می‌شوند، هر کدام با جزئیات خود (نام و نام خانوادگی و شماره همراه).

